@using Binacle.Net.UIModule.Components.Features
@using Binacle.Net.UIModule.Components.Shared.Forms


@inherits AppletComponentBase

@page "/PackingDemo"

<PageTitle>@Title</PageTitle>

<h1>@Title</h1>

<p>
	@Description
</p>
<p>
	This demo uses the experimental V3 API.
</p>

<EditForm Model="@Model" class="grid" OnSubmit="@((editContext) => this.GetResults(editContext))">
	<DataAnnotationsValidator/>

	<article class="s12 primary-container">
		<fieldset>
			<legend>Bins</legend>
			@foreach (var bin in Model.Bins)
			{
				<div class="row">
					<div class="max">
						<InputNumberField @bind-Value="bin.Length" Label="Length" id="length" ContainerFieldClass="small padless"/>
					</div>
					<div class="max">
						<InputNumberField @bind-Value="bin.Width" Label="Width" id="width" ContainerFieldClass="small padless"/>
					</div>
					<div class="max">
						<InputNumberField @bind-Value="bin.Height" Label="Height" id="height" ContainerFieldClass="small padless"/>
					</div>
					<button type="button" class="transparent circle" @onclick="(() => this.RemoveBin(bin))">
						<MaterialSymbol Name="delete"/>
					</button>
				</div>
				<div>
					<ValidationMessage For="@(() => bin.Length)" class="error-text"/>
					<ValidationMessage For="@(() => bin.Width)" class="error-text"/>
					<ValidationMessage For="@(() => bin.Height)" class="error-text"/>
				</div>
			}
		</fieldset>
		<nav>
			<button class="max" type="button" @onclick="this.AddBin">
				<MaterialSymbol Name="add"/>
				<span class="m l">Add Bin</span>
			</button>
			<button class="max" type="button" @onclick="this.ClearAllBins">
				<MaterialSymbol Name="delete_forever"/>
				<span class="m l">Clear All Bins</span>
			</button>
			<button class="max" type="button" @onclick="this.RandomizeBinsFromSamples">
				<MaterialSymbol Name="refresh"/>
				<span class="m l">Randomize from samples</span>
			</button>
		</nav>
	</article>

	<article class="s12 secondary-container">
		<fieldset>
			<legend>Items</legend>
			@foreach (var item in Model.Items)
			{
				<div class="row">
					<div class="max">
						<InputNumberField @bind-Value="item.Length" Label="Length" id="length" ContainerFieldClass="small padless"/>
					</div>
					<div class="max">
						<InputNumberField @bind-Value="item.Width" Label="Width" id="width" ContainerFieldClass="small padless"/>
					</div>
					<div class="max">
						<InputNumberField @bind-Value="item.Height" Label="Height" id="height" ContainerFieldClass="small padless"/>
					</div>
					<div class="max">
						<InputNumberField @bind-Value="item.Quantity" Label="Quantity" id="quantity" ContainerFieldClass="small padless"/>
					</div>
					<button type="button" class="transparent circle" @onclick="(() => this.RemoveItem(item))">
						<MaterialSymbol Name="delete"/>
					</button>
				</div>
				<div>
					<ValidationMessage For="@(() => item.Length)" class="error-text"/>
					<ValidationMessage For="@(() => item.Width)" class="error-text"/>
					<ValidationMessage For="@(() => item.Height)" class="error-text"/>
					<ValidationMessage For="@(() => item.Quantity)" class="error-text"/>
				</div>
			}
		</fieldset>
		<nav>
			<button class="max secondary" type="button" @onclick="this.AddItem">
				<MaterialSymbol Name="add"/>
				<span class="m l">Add Item</span>
			</button>
			<button class="max secondary" type="button" @onclick="this.ClearAllItems">
				<MaterialSymbol Name="delete_forever"/>
				<span class="m l">Clear All Items</span>
			</button>
			<button class="max secondary" type="button" @onclick="this.RandomizeItemsFromSamples">
				<MaterialSymbol Name="refresh"/>
				<span class="m l">Randomize from samples</span>
			</button>
		</nav>
	</article>

	<fieldset class="s12">
		<div class="grid">
			<div class="s12 m6 max">
				<SelectField
					Id="algorithm"
					Label="Algorithm"
					@bind-Value="@this.Model.Algorithm"
					Options="ExtensionMethods.EnumExtensions.ToKeyValue<ViewModels.Algorithm>()"/>
			</div>
			<div class="s12 m6 row">
				<button class="max tertiary" type="submit">
					<span>Get Results</span>
				</button>
			</div>
			
		</div>
	</fieldset>
</EditForm>

<div class="grid">
	<div class="s12">
		<PackingVisualizer InitialBin="@this.selectedResult?.Bin"/>
	</div>
</div>

<div class="grid">
	<div class="s12">
		<article class="surface-variant">
			<fieldset>
				<legend>Results</legend>
				@if (this.results is null || this.results.Count == 0)
				{
					<span>No Results</span>
				}
				else
				{
					@foreach (var result in this.results)
					{
						var isFullyPacked = result.Result == UIModule.Models.PackResultType.FullyPacked;
						var percentage = result.PackedBinVolumePercentage;
						var colorClass = this.GetColorClass(result);

						<a class="row wave padding @(IsSelected(result) ? $"surface-container border" : string.Empty)"
						   @onclick="@(() => this.SelectResult(result))">
							<MaterialSymbol Name="package_2" class="@($"large {colorClass}-text")" />
							<div class="grid no-space max">
								<span class="s4">
									Bin: @result.Bin!.ID
								</span>
								<span class="s8 right-align">
									Packed Bin Volume: @result.PackedBinVolumePercentage%
								</span>
								<progress value="@percentage" max="100"
								          class="@($"s12 surface-container-lowest {colorClass}-text")"></progress>


								<div class="s4">
									@result.Result.ToString()
								</div>
								@if (!isFullyPacked)
								{
									<div class="s8 right-align">
										Packed Items Volume: @result.PackedItemsVolumePercentage%
									</div>
								}
							</div>
						</a>
					}
				}
			</fieldset>
		</article>
	</div>
</div>

<ErrorsDialog @bind-Errors="@this.errors" />