@using Binacle.Net.UIModule.Components.Layout
@using Microsoft.AspNetCore.Http

@inject Services.ThemeService ThemeService
@inject IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    @* Let browser know website is optimized for mobile *@
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <base href="." />

    <link type="text/css" rel="stylesheet" href="vendor/beercss/beer.min.css" >
    
    <link type="text/css" rel="stylesheet" href="css/main.css" media="screen,projection" />
    
    @* Favicon *@
    <link rel="icon" href="favicon.ico" />
    <HeadOutlet />
</head>

<body class="@ThemeBodyClass">
    <Header></Header>
	<Navbar />
    <Routes />
    <Footer></Footer>

	<script src="js/cookies.js"></script>

    <script type="importmap">
        {
          "imports": {
            "three": "https://cdn.jsdelivr.net/npm/three@0.176.0/build/three.module.js",
            "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.176.0/examples/jsm/",
            "binacle/addons/": "./js/addons/"

          }
        }
    </script>
    <script type="module" src="js/PackingVisualizer.js"></script>
    <script type="module" src="vendor/beercss/beer.min.js"></script>
    @* We recommend using the material-dynamic-colors only when your app needs to change theme at runtime. *@
    @*<script type="module" src="vendor/material-dynamic-colors/material-dynamic-colors.min.js"></script>*@
    <script src="js/themeswitcher.js"></script>
</body>

</html>

@code {
	#pragma warning disable CS8602 // Dereference of a possibly null reference.
	#pragma warning disable CS8618  // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
	
	private string ThemeBodyClass { get; set; }
	
	protected override void OnInitialized()
	{
		if (!HttpContextAccessor.HttpContext.Request.Cookies.ContainsKey("theme"))
		{
			this.ThemeBodyClass = ThemeService?.DefaultTheme switch
			{
				Models.Theme.Dark => "dark",
				_ => "light"
			};
			return;
		}
		var theme = HttpContextAccessor.HttpContext.Request.Cookies["theme"];
		this.ThemeBodyClass = theme switch
		{
			"dark" => "dark",
			_ => "light"
		};
	}

}