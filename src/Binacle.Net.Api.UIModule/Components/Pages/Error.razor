@using System.Diagnostics
@using Microsoft.AspNetCore.Http

@page "/Error"
@page "/Error/{ErrorCode}"

@if (!string.IsNullOrWhiteSpace(this.ErrorCode))
{
	<PageTitle>Error @this.ErrorCode</PageTitle>
}
else
{
	<PageTitle>Error</PageTitle>
}

<article class="medium middle-align center-align">
	<div>
		<MaterialSymbol class="error-text" Name="error" />
		<h1 class="error-text">Error @this.ErrorCode</h1>
		<p>An error occurred while processing your request.</p>

	</div>
</article>

@if (this.IsDevelopment)
{
	<article>
		<h3>Development Mode</h3>
		<p>
			<strong>Request ID:</strong> <code>@RequestId</code>
		</p>
		<p>
			Swapping to <strong>Development</strong> environment will display more detailed information about the
			error that
			occurred.
		</p>
		<p>
			<strong>The Development environment shouldn't be enabled for deployed applications.</strong>
			It can result in displaying sensitive information from exceptions to end users.
			For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong>
			environment variable to <strong>Development</strong>
			and restarting the app.
		</p>
	</article>
}



@code {
	[Parameter] public string? ErrorCode { get; set; }

	[CascadingParameter] private HttpContext? HttpContext { get; set; }

	private string? RequestId { get; set; }
	private bool IsDevelopment { get; set; }

	protected override void OnInitialized()
	{
		this.RequestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;
		this.IsDevelopment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development";
	}

}
